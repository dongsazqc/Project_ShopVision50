// src/utils/axios.js
import axios from "axios";
import { message } from "antd";

// ================================
// ‚öôÔ∏è 1Ô∏è‚É£ C·∫§U H√åNH C∆† B·∫¢N
// ================================
const api = axios.create({
  baseURL: "http://localhost:5000/api", // üëâ Thay b·∫±ng URL API th·∫≠t c·ªßa b·∫°n (vd: https://api.stylewear.vn/api)
  timeout: 15000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// ================================
// üîë 2Ô∏è‚É£ INTERCEPTOR REQUEST
// ================================
api.interceptors.request.use(
  (config) => {
    // L·∫•y token JWT t·ª´ localStorage (ƒë∆∞·ª£c BE .NET c·∫•p khi ƒëƒÉng nh·∫≠p)
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// ================================
// üö® 3Ô∏è‚É£ INTERCEPTOR RESPONSE
// ================================
api.interceptors.response.use(
  (response) => {
    // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu chu·∫©n
    return response;
  },
  (error) => {
    const status = error.response?.status;

    // 401: Unauthorized ‚Üí h·∫øt h·∫°n token ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p
    if (status === 401) {
      message.warning("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      localStorage.removeItem("token");
      setTimeout(() => {
        window.location.href = "/login";
      }, 1000);
    }

    // 400: Bad Request ‚Üí th∆∞·ªùng l√† l·ªói validation (ModelState)
    else if (status === 400) {
      const errors = error.response?.data?.errors;
      if (errors) {
        // .NET g·ª≠i l·ªói d·∫°ng { "Field": [ "Error message" ] }
        const firstError = Object.values(errors)[0][0];
        message.error(firstError);
      } else {
        message.error(error.response?.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
      }
    }

    // 403: Forbidden ‚Üí kh√¥ng ƒë·ªß quy·ªÅn
    else if (status === 403) {
      message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.");
    }

    // 404: Not Found
    else if (status === 404) {
      message.error("Kh√¥ng t√¨m th·∫•y t√†i nguy√™n y√™u c·∫ßu.");
    }

    // 500+: L·ªói server
    else if (status >= 500) {
      message.error("L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }

    return Promise.reject(error);
  }
);

// ================================
// üì¶ 4Ô∏è‚É£ EXPORT
// ================================
export default api;
