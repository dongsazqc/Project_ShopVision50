// src/pages/Promotions.jsx
import {
  Table,
  Button,
  Space,
  Modal,
  Form,
  Input,
  DatePicker,
  InputNumber,
  Tag,
  message,
  Tabs,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  EyeOutlined,
  GiftOutlined,
} from "@ant-design/icons";
import dayjs from "dayjs";
import { useEffect, useState } from "react";
import api from "../utils/axios";

const { TabPane } = Tabs;
const { RangePicker } = DatePicker;

export default function Promotions() {
  const [promotions, setPromotions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [editingPromo, setEditingPromo] = useState(null);
  const [form] = Form.useForm();
  const [detailModal, setDetailModal] = useState(false);
  const [selectedPromo, setSelectedPromo] = useState(null);

  // üì¶ L·∫•y danh s√°ch khuy·∫øn m√£i
  const fetchPromotions = async () => {
    try {
      setLoading(true);
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/khuyenmai (include SanPham n·∫øu c·∫ßn)
      const res = await api.get("/khuyenmai");
      const data = (res.data || []).map((km) => ({
        ...km,
        trangThai: dayjs().isBefore(dayjs(km.ngayKetThuc)), // true n·∫øu ch∆∞a h·∫øt h·∫°n
      }));
      setPromotions(data);
    } catch (err) {
      console.error(err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch khuy·∫øn m√£i");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPromotions();
  }, []);

  // üíæ Th√™m / S·ª≠a khuy·∫øn m√£i
  const handleSave = async (values) => {
    try {
      const [start, end] = values.dateRange;
      const body = {
        tenChuongTrinh: values.tenChuongTrinh,
        moTa: values.moTa,
        phanTramGiam: values.phanTramGiam,
        ngayBatDau: start,
        ngayKetThuc: end,
      };

      if (editingPromo) {
        // TODO: ‚öôÔ∏è API th·∫≠t: PUT /api/khuyenmai/:id
        await api.put(`/khuyenmai/${editingPromo.khuyenMaiId}`, body);
        message.success("C·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng");
      } else {
        // TODO: ‚öôÔ∏è API th·∫≠t: POST /api/khuyenmai
        await api.post("/khuyenmai", body);
        message.success("Th√™m khuy·∫øn m√£i th√†nh c√¥ng");
      }

      setOpenModal(false);
      form.resetFields();
      fetchPromotions();
    } catch (err) {
      console.error(err);
      message.error("L∆∞u khuy·∫øn m√£i th·∫•t b·∫°i");
    }
  };

  // üëÅÔ∏è Xem chi ti·∫øt khuy·∫øn m√£i
  const handleView = async (record) => {
    try {
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/khuyenmai/:id (include SanPham)
      const res = await api.get(`/khuyenmai/${record.khuyenMaiId}`);
      setSelectedPromo(res.data);
      setDetailModal(true);
    } catch (err) {
      console.error(err);
      message.error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt khuy·∫øn m√£i");
    }
  };

  const columns = [
    {
      title: "T√™n ch∆∞∆°ng tr√¨nh",
      dataIndex: "tenChuongTrinh",
      key: "tenChuongTrinh",
      render: (text) => (
        <Space>
          <GiftOutlined />
          {text}
        </Space>
      ),
    },
    {
      title: "% Gi·∫£m",
      dataIndex: "phanTramGiam",
      key: "phanTramGiam",
      render: (val) => `${val}%`,
    },
    {
      title: "Ng√†y b·∫Øt ƒë·∫ßu",
      dataIndex: "ngayBatDau",
      render: (val) => dayjs(val).format("DD/MM/YYYY"),
    },
    {
      title: "Ng√†y k·∫øt th√∫c",
      dataIndex: "ngayKetThuc",
      render: (val) => dayjs(val).format("DD/MM/YYYY"),
    },
    {
      title: "Tr·∫°ng th√°i",
      key: "trangThai",
      render: (_, record) =>
        dayjs().isBefore(dayjs(record.ngayKetThuc)) ? (
          <Tag color="green">ƒêang √°p d·ª•ng</Tag>
        ) : (
          <Tag color="volcano">H·∫øt h·∫°n</Tag>
        ),
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            icon={<EyeOutlined />}
            onClick={() => handleView(record)}
            type="default"
          />
          <Button
            icon={<EditOutlined />}
            onClick={() => {
              setEditingPromo(record);
              form.setFieldsValue({
                tenChuongTrinh: record.tenChuongTrinh,
                moTa: record.moTa,
                phanTramGiam: record.phanTramGiam,
                dateRange: [
                  dayjs(record.ngayBatDau),
                  dayjs(record.ngayKetThuc),
                ],
              });
              setOpenModal(true);
            }}
            type="primary"
          />
        </Space>
      ),
    },
  ];

  return (
    <div>
      {/* Thanh c√¥ng c·ª• */}
      <Space
        style={{
          marginBottom: 16,
          display: "flex",
          justifyContent: "space-between",
        }}
      >
        <Input.Search
          placeholder="T√¨m khuy·∫øn m√£i..."
          onSearch={(value) =>
            setPromotions((prev) =>
              prev.filter((p) =>
                p.tenChuongTrinh.toLowerCase().includes(value.toLowerCase())
              )
            )
          }
          style={{ width: 300 }}
        />
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingPromo(null);
            form.resetFields();
            setOpenModal(true);
          }}
        >
          Th√™m khuy·∫øn m√£i
        </Button>
      </Space>

      {/* B·∫£ng khuy·∫øn m√£i */}
      <Table
        dataSource={promotions}
        columns={columns}
        rowKey="khuyenMaiId"
        loading={loading}
        bordered
      />

      {/* Modal th√™m/s·ª≠a */}
      <Modal
        title={editingPromo ? "Ch·ªânh s·ª≠a khuy·∫øn m√£i" : "Th√™m khuy·∫øn m√£i m·ªõi"}
        open={openModal}
        onCancel={() => setOpenModal(false)}
        onOk={() => form.submit()}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form} onFinish={handleSave}>
          <Form.Item
            label="T√™n ch∆∞∆°ng tr√¨nh"
            name="tenChuongTrinh"
            rules={[{ required: true, message: "Nh·∫≠p t√™n ch∆∞∆°ng tr√¨nh" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item label="M√¥ t·∫£" name="moTa">
            <Input.TextArea rows={3} />
          </Form.Item>

          <Form.Item
            label="Ph·∫ßn trƒÉm gi·∫£m"
            name="phanTramGiam"
            rules={[{ required: true, message: "Nh·∫≠p ph·∫ßn trƒÉm gi·∫£m gi√°" }]}
          >
            <InputNumber min={1} max={100} addonAfter="%" style={{ width: "100%" }} />
          </Form.Item>

          <Form.Item
            label="Th·ªùi gian √°p d·ª•ng"
            name="dateRange"
            rules={[{ required: true, message: "Ch·ªçn th·ªùi gian khuy·∫øn m√£i" }]}
          >
            <RangePicker format="DD/MM/YYYY" style={{ width: "100%" }} />
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal chi ti·∫øt */}
      <Modal
        open={detailModal}
        title="Chi ti·∫øt khuy·∫øn m√£i"
        onCancel={() => setDetailModal(false)}
        footer={null}
        width={800}
      >
        {selectedPromo && (
          <Tabs defaultActiveKey="1">
            <TabPane tab="Th√¥ng tin" key="1">
              <p><b>T√™n:</b> {selectedPromo.tenChuongTrinh}</p>
              <p><b>M√¥ t·∫£:</b> {selectedPromo.moTa || "Kh√¥ng c√≥"}</p>
              <p><b>Gi·∫£m gi√°:</b> {selectedPromo.phanTramGiam}%</p>
              <p><b>Th·ªùi gian:</b> {dayjs(selectedPromo.ngayBatDau).format("DD/MM/YYYY")} ‚Üí {dayjs(selectedPromo.ngayKetThuc).format("DD/MM/YYYY")}</p>
              <p>
                <b>Tr·∫°ng th√°i:</b>{" "}
                {dayjs().isBefore(dayjs(selectedPromo.ngayKetThuc)) ? (
                  <Tag color="green">ƒêang √°p d·ª•ng</Tag>
                ) : (
                  <Tag color="volcano">H·∫øt h·∫°n</Tag>
                )}
              </p>
            </TabPane>

            <TabPane tab="S·∫£n ph·∫©m √°p d·ª•ng" key="2">
              <Table
                dataSource={selectedPromo.sanPham || []}
                columns={[
                  { title: "T√™n s·∫£n ph·∫©m", dataIndex: "tenSanPham" },
                  {
                    title: "Gi√° g·ªëc",
                    dataIndex: "giaGoc",
                    render: (val) => `${val?.toLocaleString()} ‚Ç´`,
                  },
                  { title: "Danh m·ª•c", dataIndex: "tenDanhMuc" },
                ]}
                pagination={false}
                rowKey="sanPhamId"
              />
            </TabPane>
          </Tabs>
        )}
      </Modal>
    </div>
  );
}
