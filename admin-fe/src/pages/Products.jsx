// import {
//   Table,
//   Button,
//   Space,
//   Modal,
//   Form,
//   Input,
//   Select,
//   message,
//   Tabs,
//   Upload,
//   Popconfirm,
//   Tag,
// } from "antd";
// import {
//   PlusOutlined,
//   EditOutlined,
//   DeleteOutlined,
//   EyeOutlined,
//   UploadOutlined,
// } from "@ant-design/icons";
// import { useEffect, useState } from "react";
// import api from "../../utils/axios"; // ‚öôÔ∏è Import axios c·∫•u h√¨nh s·∫µn

// const { Option } = Select;
// const { TabPane } = Tabs;

// export default function Products() {
//   const [products, setProducts] = useState([]);
//   const [loading, setLoading] = useState(false);
//   const [openModal, setOpenModal] = useState(false);
//   const [editingProduct, setEditingProduct] = useState(null);
//   const [form] = Form.useForm();
//   const [detailModal, setDetailModal] = useState(false);
//   const [selectedProduct, setSelectedProduct] = useState(null);

//   // =====================================================
//   // üì¶ L·∫§Y DANH S√ÅCH S·∫¢N PH·∫®M
//   // =====================================================
//   const fetchProducts = async () => {
//     try {
//       setLoading(true);
//       // ‚úÖ G·∫ÆN API TH·∫¨T ·ªû ƒê√ÇY (v√≠ d·ª•: /api/SanPham/GetAll)
//       const res = await api.get("/sanpham");
//       setProducts(res.data || []);
//     } catch (err) {
//       console.error(err);
//       message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m");
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchProducts();
//   }, []);

//   // =====================================================
//   // üíæ TH√äM / S·ª¨A S·∫¢N PH·∫®M
//   // =====================================================
//   const handleSave = async (values) => {
//     try {
//       if (editingProduct) {
//         // ‚úÖ G·∫ÆN API TH·∫¨T (PUT /api/SanPham/{id})
//         await api.put(`/sanpham/${editingProduct.sanPhamId}`, values);
//         message.success("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng");
//       } else {
//         // ‚úÖ G·∫ÆN API TH·∫¨T (POST /api/SanPham)
//         await api.post("/sanpham", values);
//         message.success("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng");
//       }
//       fetchProducts();
//       setOpenModal(false);
//       form.resetFields();
//     } catch (err) {
//       console.error(err);
//       message.error("L∆∞u s·∫£n ph·∫©m th·∫•t b·∫°i");
//     }
//   };

//   // =====================================================
//   // üóëÔ∏è XO√Å S·∫¢N PH·∫®M
//   // =====================================================
//   const handleDelete = async (id) => {
//     try {
//       // ‚úÖ G·∫ÆN API TH·∫¨T (DELETE /api/SanPham/{id})
//       await api.delete(`/sanpham/${id}`);
//       message.success("ƒê√£ xo√° s·∫£n ph·∫©m");
//       fetchProducts();
//     } catch (err) {
//       console.error(err);
//       message.error("Xo√° th·∫•t b·∫°i");
//     }
//   };

//   // =====================================================
//   // üëÅÔ∏è XEM CHI TI·∫æT
//   // =====================================================
//   const handleView = async (record) => {
//     try {
//       // ‚úÖ G·∫ÆN API TH·∫¨T (GET /api/SanPham/{id})
//       const res = await api.get(`/sanpham/${record.sanPhamId}`);
//       setSelectedProduct(res.data);
//       setDetailModal(true);
//     } catch (err) {
//       console.error(err);
//       message.error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·∫£n ph·∫©m");
//     }
//   };

//   // =====================================================
//   // üìä C·ªòT B·∫¢NG
//   // =====================================================
//   const columns = [
//     { title: "T√™n s·∫£n ph·∫©m", dataIndex: "tenSanPham", key: "tenSanPham" },
//     {
//       title: "Danh m·ª•c",
//       render: (_, record) => record.danhMuc?.tenDanhMuc || "‚Äî",
//     },
//     {
//       title: "Ch·∫•t li·ªáu",
//       render: (_, record) => record.chatLieu?.tenChatLieu || "‚Äî",
//     },
//     {
//       title: "Phong c√°ch",
//       render: (_, record) => record.phongCach?.tenPhongCach || "‚Äî",
//     },
//     {
//       title: "Gi·ªõi t√≠nh",
//       render: (_, record) => record.gioiTinh?.tenGioiTinh || "‚Äî",
//     },
//     {
//       title: "Gi√° g·ªëc",
//       dataIndex: "giaGoc",
//       render: (val) => `${val?.toLocaleString()} ‚Ç´`,
//     },
//     {
//       title: "Tr·∫°ng th√°i",
//       dataIndex: "trangThai",
//       render: (val) =>
//         val ? <Tag color="green">ƒêang b√°n</Tag> : <Tag color="red">Ng·ª´ng b√°n</Tag>,
//     },
//     {
//       title: "Thao t√°c",
//       key: "actions",
//       render: (_, record) => (
//         <Space>
//           <Button icon={<EyeOutlined />} onClick={() => handleView(record)} />
//           <Button
//             icon={<EditOutlined />}
//             onClick={() => {
//               setEditingProduct(record);
//               form.setFieldsValue(record);
//               setOpenModal(true);
//             }}
//             type="primary"
//           />
//           <Popconfirm
//             title="X√≥a s·∫£n ph·∫©m n√†y?"
//             onConfirm={() => handleDelete(record.sanPhamId)}
//           >
//             <Button danger icon={<DeleteOutlined />} />
//           </Popconfirm>
//         </Space>
//       ),
//     },
//   ];

//   return (
//     <div>
//       <Space
//         style={{
//           marginBottom: 16,
//           display: "flex",
//           justifyContent: "space-between",
//         }}
//       >
//         <Input.Search
//           placeholder="T√¨m s·∫£n ph·∫©m..."
//           onSearch={(value) =>
//             setProducts((prev) =>
//               prev.filter((p) =>
//                 p.tenSanPham.toLowerCase().includes(value.toLowerCase())
//               )
//             )
//           }
//           style={{ width: 300 }}
//         />
//         <Button
//           type="primary"
//           icon={<PlusOutlined />}
//           onClick={() => {
//             setEditingProduct(null);
//             setOpenModal(true);
//           }}
//         >
//           Th√™m s·∫£n ph·∫©m
//         </Button>
//       </Space>

//       <Table
//         dataSource={products}
//         columns={columns}
//         loading={loading}
//         rowKey="sanPhamId"
//         bordered
//       />

//       {/* MODAL TH√äM / S·ª¨A */}
//       <Modal
//         title={editingProduct ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}
//         open={openModal}
//         onCancel={() => setOpenModal(false)}
//         onOk={() => form.submit()}
//         okText="L∆∞u"
//         cancelText="H·ªßy"
//         width={600}
//       >
//         <Form layout="vertical" form={form} onFinish={handleSave}>
//           <Form.Item
//             label="T√™n s·∫£n ph·∫©m"
//             name="tenSanPham"
//             rules={[{ required: true, message: "Nh·∫≠p t√™n s·∫£n ph·∫©m" }]}
//           >
//             <Input />
//           </Form.Item>
//           <Form.Item label="M√¥ t·∫£" name="moTa">
//             <Input.TextArea rows={3} />
//           </Form.Item>
//           <Form.Item label="Gi√° g·ªëc" name="giaGoc">
//             <Input type="number" min={0} />
//           </Form.Item>
//           <Form.Item label="Th∆∞∆°ng hi·ªáu" name="thuongHieu">
//             <Input />
//           </Form.Item>
//           <Form.Item label="B·∫£o h√†nh" name="baoHanh">
//             <Input />
//           </Form.Item>
//           <Form.Item label="Tr·∫°ng th√°i" name="trangThai" initialValue={true}>
//             <Select>
//               <Option value={true}>ƒêang b√°n</Option>
//               <Option value={false}>Ng·ª´ng b√°n</Option>
//             </Select>
//           </Form.Item>
//         </Form>
//       </Modal>

//       {/* MODAL CHI TI·∫æT */}
//       <Modal
//         open={detailModal}
//         title="Chi ti·∫øt s·∫£n ph·∫©m"
//         onCancel={() => setDetailModal(false)}
//         footer={null}
//         width={900}
//       >
//         {selectedProduct && (
//           <Tabs defaultActiveKey="1">
//             <TabPane tab="Th√¥ng tin chung" key="1">
//               <p><b>T√™n:</b> {selectedProduct.tenSanPham}</p>
//               <p><b>Th∆∞∆°ng hi·ªáu:</b> {selectedProduct.thuongHieu}</p>
//               <p><b>Gi√° g·ªëc:</b> {selectedProduct.giaGoc?.toLocaleString()} ‚Ç´</p>
//               <p><b>Danh m·ª•c:</b> {selectedProduct.danhMuc?.tenDanhMuc || "‚Äî"}</p>
//               <p><b>Ch·∫•t li·ªáu:</b> {selectedProduct.chatLieu?.tenChatLieu || "‚Äî"}</p>
//               <p><b>Phong c√°ch:</b> {selectedProduct.phongCach?.tenPhongCach || "‚Äî"}</p>
//               <p><b>Gi·ªõi t√≠nh:</b> {selectedProduct.gioiTinh?.tenGioiTinh || "‚Äî"}</p>
//               <p><b>Xu·∫•t x·ª©:</b> {selectedProduct.xuatXu?.tenNuoc || "‚Äî"}</p>
//             </TabPane>

//             <TabPane tab="Bi·∫øn th·ªÉ" key="2">
//               <Table
//                 dataSource={selectedProduct.bienTheSanPham || []}
//                 columns={[
//                   { title: "K√≠ch c·ª°", dataIndex: ["kichCo", "tenKichCo"] },
//                   { title: "M√†u s·∫Øc", dataIndex: ["mauSac", "tenMau"] },
//                   { title: "Gi√° b√°n", dataIndex: "giaBan" },
//                   { title: "T·ªìn kho", dataIndex: "soLuongTon" },
//                 ]}
//                 pagination={false}
//                 rowKey="bienTheId"
//               />
//             </TabPane>

//             <TabPane tab="H√¨nh ·∫£nh" key="3">
//               <Upload
//                 listType="picture-card"
//                 fileList={
//                   selectedProduct.hinhAnhSanPham?.map((img) => ({
//                     uid: img.hinhAnhId,
//                     url: img.url,
//                     name: `·∫¢nh ${img.hinhAnhId}`,
//                     status: "done",
//                   })) || []
//                 }
//                 showUploadList={{ showRemoveIcon: false }}
//                 itemRender={(originNode, file) => (
//                   <img
//                     src={file.url}
//                     alt="·∫¢nh s·∫£n ph·∫©m"
//                     style={{
//                       width: 100,
//                       height: 100,
//                       objectFit: "cover",
//                       borderRadius: 6,
//                     }}
//                   />
//                 )}
//               >
//                 <Button icon={<UploadOutlined />}>Th√™m ·∫£nh</Button>
//               </Upload>
//             </TabPane>
//           </Tabs>
//         )}
//       </Modal>
//     </div>
//   );
// }
export default function Dashboard() {
  return <h1>Qu·∫£n l√Ω s·∫£n ph·∫©m</h1>;
}