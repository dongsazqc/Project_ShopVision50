// src/pages/Products.jsx
import {
  Table,
  Button,
  Space,
  Modal,
  Form,
  Input,
  Select,
  message,
  Tabs,
  Tag,
  Upload,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  EyeOutlined,
  UploadOutlined,
  CheckOutlined,
  StopOutlined,
} from "@ant-design/icons";
import { useEffect, useState } from "react";
import api from "../utils/axios";

const { Option } = Select;
const { TabPane } = Tabs;

export default function Products() {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [detailModal, setDetailModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [form] = Form.useForm();

  // üì¶ 1Ô∏è‚É£ L·∫•y danh s√°ch s·∫£n ph·∫©m
  const fetchProducts = async () => {
    try {
      setLoading(true);
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/sanpham (include BienThe, DanhMuc, HinhAnh)
      const res = await api.get("/sanpham");
      const data = res.data || [];

      // ‚úÖ N·∫øu s·∫£n ph·∫©m c√≥ t·ªïng t·ªìn = 0 ‚Üí c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫°m tr√™n FE
      const updated = data.map((p) => {
        const totalStock =
          p.bienTheSanPham?.reduce(
            (sum, b) => sum + (b.soLuongTon || 0),
            0
          ) || 0;
        return { ...p, tongTon: totalStock, trangThai: totalStock > 0 };
      });

      setProducts(updated);
    } catch (err) {
      console.error(err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m");
    } finally {
      setLoading(false);
    }
  };

  // üìã 2Ô∏è‚É£ L·∫•y danh m·ª•c
  const fetchCategories = async () => {
    try {
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/danhmuc
      const res = await api.get("/danhmuc");
      setCategories(res.data || []);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchProducts();
    fetchCategories();
  }, []);

  // üíæ 3Ô∏è‚É£ Th√™m / s·ª≠a s·∫£n ph·∫©m
  const handleSave = async (values) => {
    try {
      if (editingProduct) {
        // TODO: ‚öôÔ∏è API th·∫≠t: PUT /api/sanpham/:id
        await api.put(`/sanpham/${editingProduct.sanPhamId}`, values);
        message.success("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng");
      } else {
        // TODO: ‚öôÔ∏è API th·∫≠t: POST /api/sanpham
        await api.post("/sanpham", values);
        message.success("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng");
      }
      fetchProducts();
      setOpenModal(false);
      form.resetFields();
    } catch (err) {
      console.error(err);
      message.error("L∆∞u th·∫•t b·∫°i");
    }
  };

  // üîÑ 4Ô∏è‚É£ ƒê·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m (ng·ª´ng b√°n <-> ƒëang b√°n)
  const handleToggleStatus = async (product) => {
    try {
      const newStatus = !product.trangThai;

      // TODO: ‚öôÔ∏è API th·∫≠t: PUT /api/sanpham/{id}/trangthai
      await api.put(`/sanpham/${product.sanPhamId}`, {
        ...product,
        trangThai: newStatus,
      });

      message.success(
        newStatus ? "ƒê√£ m·ªü b√°n s·∫£n ph·∫©m" : "ƒê√£ ng·ª´ng b√°n s·∫£n ph·∫©m"
      );
      fetchProducts();
    } catch (err) {
      console.error(err);
      message.error("C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i");
    }
  };

  // üëÅÔ∏è 5Ô∏è‚É£ Xem chi ti·∫øt s·∫£n ph·∫©m
  const handleView = async (record) => {
    try {
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/sanpham/:id (include BienThe, HinhAnh)
      const res = await api.get(`/sanpham/${record.sanPhamId}`);
      setSelectedProduct(res.data);
      setDetailModal(true);
    } catch (err) {
      console.error(err);
      message.error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·∫£n ph·∫©m");
    }
  };

  const columns = [
    { title: "T√™n s·∫£n ph·∫©m", dataIndex: "tenSanPham", key: "tenSanPham" },
    {
      title: "Danh m·ª•c",
      dataIndex: ["danhMuc", "tenDanhMuc"],
      render: (_, record) => record.danhMuc?.tenDanhMuc || "‚Äî",
    },
    {
      title: "Gi√° g·ªëc",
      dataIndex: "giaGoc",
      render: (val) => `${val?.toLocaleString()} ‚Ç´`,
    },
    { title: "Th∆∞∆°ng hi·ªáu", dataIndex: "thuongHieu" },
    {
      title: "T·ªìn kho",
      dataIndex: "tongTon",
      render: (val) => <b>{val || 0}</b>,
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "trangThai",
      render: (val, record) => {
        const color = record.tongTon === 0 ? "volcano" : val ? "green" : "gray";
        const text =
          record.tongTon === 0
            ? "H·∫øt h√†ng"
            : val
            ? "ƒêang b√°n"
            : "Ng·ª´ng b√°n";
        return <Tag color={color}>{text}</Tag>;
      },
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button icon={<EyeOutlined />} onClick={() => handleView(record)} />
          <Button
            icon={<EditOutlined />}
            type="primary"
            onClick={() => {
              setEditingProduct(record);
              form.setFieldsValue(record);
              setOpenModal(true);
            }}
          />
          <Button
            icon={record.trangThai ? <StopOutlined /> : <CheckOutlined />}
            danger={record.trangThai}
            onClick={() => handleToggleStatus(record)}
          >
            {record.trangThai ? "Ng·ª´ng b√°n" : "M·ªü b√°n"}
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div>
      {/* Thanh t√¨m ki·∫øm + n√∫t th√™m */}
      <Space
        style={{
          marginBottom: 16,
          display: "flex",
          justifyContent: "space-between",
        }}
      >
        <Input.Search
          placeholder="T√¨m s·∫£n ph·∫©m..."
          onSearch={(value) =>
            setProducts((prev) =>
              prev.filter((p) =>
                p.tenSanPham.toLowerCase().includes(value.toLowerCase())
              )
            )
          }
          style={{ width: 300 }}
        />
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingProduct(null);
            setOpenModal(true);
          }}
        >
          Th√™m s·∫£n ph·∫©m
        </Button>
      </Space>

      {/* B·∫£ng s·∫£n ph·∫©m */}
      <Table
        dataSource={products}
        columns={columns}
        loading={loading}
        rowKey="sanPhamId"
        bordered
      />

      {/* Modal th√™m / s·ª≠a */}
      <Modal
        title={editingProduct ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}
        open={openModal}
        onCancel={() => setOpenModal(false)}
        onOk={() => form.submit()}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form} onFinish={handleSave}>
          <Form.Item
            label="T√™n s·∫£n ph·∫©m"
            name="tenSanPham"
            rules={[{ required: true, message: "Nh·∫≠p t√™n s·∫£n ph·∫©m" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item label="M√¥ t·∫£" name="moTa">
            <Input.TextArea rows={3} />
          </Form.Item>
          <Form.Item label="Gi√° g·ªëc" name="giaGoc">
            <Input type="number" min={0} />
          </Form.Item>
          <Form.Item label="Th∆∞∆°ng hi·ªáu" name="thuongHieu">
            <Input />
          </Form.Item>
          <Form.Item label="B·∫£o h√†nh" name="baoHanh">
            <Input />
          </Form.Item>
          <Form.Item label="Danh m·ª•c" name="danhMucId">
            <Select placeholder="Ch·ªçn danh m·ª•c">
              {categories.map((c) => (
                <Option key={c.danhMucId} value={c.danhMucId}>
                  {c.tenDanhMuc}
                </Option>
              ))}
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal chi ti·∫øt */}
      <Modal
        open={detailModal}
        title="Chi ti·∫øt s·∫£n ph·∫©m"
        onCancel={() => setDetailModal(false)}
        footer={null}
        width={800}
      >
        {selectedProduct && (
          <Tabs defaultActiveKey="1">
            <TabPane tab="Th√¥ng tin chung" key="1">
              <p><b>T√™n:</b> {selectedProduct.tenSanPham}</p>
              <p><b>M√¥ t·∫£:</b> {selectedProduct.moTa}</p>
              <p><b>Th∆∞∆°ng hi·ªáu:</b> {selectedProduct.thuongHieu}</p>
              <p><b>B·∫£o h√†nh:</b> {selectedProduct.baoHanh}</p>
              <p>
                <b>Gi√° g·ªëc:</b>{" "}
                {selectedProduct.giaGoc?.toLocaleString()} ‚Ç´
              </p>
              <p>
                <b>Danh m·ª•c:</b>{" "}
                {selectedProduct.danhMuc?.tenDanhMuc || "Ch∆∞a c√≥"}
              </p>
            </TabPane>

            <TabPane tab="Bi·∫øn th·ªÉ" key="2">
              <Table
                dataSource={selectedProduct.bienTheSanPham || []}
                columns={[
                  { title: "K√≠ch c·ª°", dataIndex: ["kichCo", "tenKichCo"] },
                  { title: "M√†u s·∫Øc", dataIndex: ["mauSac", "tenMau"] },
                  { title: "Gi√° b√°n", dataIndex: "giaBan" },
                  { title: "T·ªìn kho", dataIndex: "soLuongTon" },
                ]}
                pagination={false}
                rowKey="bienTheId"
              />
            </TabPane>

            <TabPane tab="H√¨nh ·∫£nh" key="3">
              <Upload
                listType="picture-card"
                fileList={
                  selectedProduct.hinhAnhSanPham?.map((img) => ({
                    uid: img.hinhAnhId,
                    url: img.url,
                    name: `·∫¢nh ${img.hinhAnhId}`,
                    status: "done",
                  })) || []
                }
                showUploadList={{ showRemoveIcon: false }}
                itemRender={(originNode, file) => (
                  <img
                    src={file.url}
                    alt="·∫¢nh s·∫£n ph·∫©m"
                    style={{
                      width: 100,
                      height: 100,
                      objectFit: "cover",
                      borderRadius: 6,
                    }}
                  />
                )}
              >
                <Button icon={<UploadOutlined />}>Th√™m ·∫£nh</Button>
              </Upload>
            </TabPane>
          </Tabs>
        )}
      </Modal>
    </div>
  );
}
