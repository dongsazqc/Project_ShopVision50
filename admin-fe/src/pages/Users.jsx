// src/pages/Users.jsx
import {
  Table,
  Button,
  Space,
  Modal,
  Form,
  Input,
  Select,
  message,
  Tag,
  Popconfirm,
  Tabs,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  EyeOutlined,
  LockOutlined,
  UnlockOutlined,
} from "@ant-design/icons";
import { useEffect, useState } from "react";
import api from "../utils/axios"; // ‚öôÔ∏è axios c·∫•u h√¨nh s·∫µn baseURL + token interceptor

const { Option } = Select;
const { TabPane } = Tabs;

export default function Users() {
  const [users, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [detailModal, setDetailModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [form] = Form.useForm();

  // üì¶ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  const fetchUsers = async () => {
    try {
      setLoading(true);
      // TODO: ‚öôÔ∏è thay API th·∫≠t t·∫°i ƒë√¢y: GET /api/nguoidung
      const res = await api.get("/nguoidung");
      setUsers(res.data || []);
    } catch (err) {
      console.error(err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
    } finally {
      setLoading(false);
    }
  };

  // üìã L·∫•y danh s√°ch vai tr√≤
  const fetchRoles = async () => {
    try {
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/vaitro
      const res = await api.get("/vaitro");
      setRoles(res.data || []);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchUsers();
    fetchRoles();
  }, []);

  // üíæ Th√™m / s·ª≠a ng∆∞·ªùi d√πng
  const handleSave = async (values) => {
    try {
      if (editingUser) {
        // TODO: ‚öôÔ∏è API th·∫≠t: PUT /api/nguoidung/:id
        await api.put(`/nguoidung/${editingUser.nguoiDungId}`, values);
        message.success("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng");
      } else {
        // TODO: ‚öôÔ∏è API th·∫≠t: POST /api/nguoidung
        await api.post("/nguoidung", values);
        message.success("Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng");
      }
      fetchUsers();
      setOpenModal(false);
      form.resetFields();
    } catch (err) {
      console.error(err);
      message.error("L∆∞u th·∫•t b·∫°i");
    }
  };

  // üîí ƒê·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng (ho·∫°t ƒë·ªông <-> kh√≥a)
  const handleToggleStatus = async (user) => {
    try {
      const newStatus = !user.trangThai;
      // TODO: ‚öôÔ∏è API th·∫≠t: PUT /api/nguoidung/{id}/trangthai ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng
      await api.put(`/nguoidung/${user.nguoiDungId}`, {
        ...user,
        trangThai: newStatus,
      });
      message.success(
        newStatus ? "M·ªü kh√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" : "Kh√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng"
      );
      fetchUsers();
    } catch (err) {
      console.error(err);
      message.error("C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i");
    }
  };

  // üëÅÔ∏è Xem chi ti·∫øt
  const handleView = async (record) => {
    try {
      // TODO: ‚öôÔ∏è API th·∫≠t: GET /api/nguoidung/:id (bao g·ªìm ƒë·ªãa ch·ªâ)
      const res = await api.get(`/nguoidung/${record.nguoiDungId}`);
      setSelectedUser(res.data);
      setDetailModal(true);
    } catch (err) {
      console.error(err);
      message.error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ng∆∞·ªùi d√πng");
    }
  };

  const columns = [
    { title: "H·ªç t√™n", dataIndex: "hoTen", key: "hoTen" },
    { title: "Email", dataIndex: "email", key: "email" },
    { title: "SƒêT", dataIndex: "soDienThoai", key: "soDienThoai" },
    {
      title: "Vai tr√≤",
      dataIndex: "vaiTro",
      key: "vaiTro",
      render: (val) => (
        <Tag color={val?.tenVaiTro === "Admin" ? "red" : "blue"}>
          {val?.tenVaiTro || "Kh√°ch h√†ng"}
        </Tag>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "trangThai",
      key: "trangThai",
      render: (val) =>
        val ? (
          <Tag color="green">Ho·∫°t ƒë·ªông</Tag>
        ) : (
          <Tag color="volcano">ƒê√£ kh√≥a</Tag>
        ),
    },
    {
      title: "Ng√†y tham gia",
      dataIndex: "ngayThamGia",
      key: "ngayThamGia",
      render: (val) => new Date(val).toLocaleDateString("vi-VN"),
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            icon={<EyeOutlined />}
            onClick={() => handleView(record)}
            type="default"
          />
          <Button
            icon={<EditOutlined />}
            onClick={() => {
              setEditingUser(record);
              form.setFieldsValue(record);
              setOpenModal(true);
            }}
            type="primary"
          />
          <Popconfirm
            title={
              record.trangThai
                ? "Kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng n√†y?"
                : "M·ªü kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng n√†y?"
            }
            onConfirm={() => handleToggleStatus(record)}
          >
            <Button
              icon={record.trangThai ? <LockOutlined /> : <UnlockOutlined />}
              danger={record.trangThai}
              type="default"
            />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <Space
        style={{
          marginBottom: 16,
          display: "flex",
          justifyContent: "space-between",
        }}
      >
        <Input.Search
          placeholder="T√¨m ng∆∞·ªùi d√πng..."
          onSearch={(value) =>
            setUsers((prev) =>
              prev.filter((u) =>
                u.hoTen.toLowerCase().includes(value.toLowerCase())
              )
            )
          }
          style={{ width: 300 }}
        />
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingUser(null);
            setOpenModal(true);
          }}
        >
          Th√™m ng∆∞·ªùi d√πng
        </Button>
      </Space>

      {/* B·∫£ng ng∆∞·ªùi d√πng */}
      <Table
        dataSource={users}
        columns={columns}
        loading={loading}
        rowKey="nguoiDungId"
        bordered
      />

      {/* Modal th√™m / s·ª≠a */}
      <Modal
        title={editingUser ? "Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng" : "Th√™m ng∆∞·ªùi d√πng m·ªõi"}
        open={openModal}
        onCancel={() => setOpenModal(false)}
        onOk={() => form.submit()}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form} onFinish={handleSave}>
          <Form.Item
            label="H·ªç t√™n"
            name="hoTen"
            rules={[{ required: true, message: "Nh·∫≠p h·ªç t√™n" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="Email"
            name="email"
            rules={[
              { required: true, type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
            ]}
          >
            <Input />
          </Form.Item>
          {!editingUser && (
            <Form.Item
              label="M·∫≠t kh·∫©u"
              name="matKhau"
              rules={[{ required: true, message: "Nh·∫≠p m·∫≠t kh·∫©u" }]}
            >
              <Input.Password />
            </Form.Item>
          )}
          <Form.Item label="S·ªë ƒëi·ªán tho·∫°i" name="soDienThoai">
            <Input />
          </Form.Item>
          <Form.Item label="ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh" name="diaChiMacDinh">
            <Input />
          </Form.Item>
          <Form.Item label="Vai tr√≤" name="vaiTroId">
            <Select placeholder="Ch·ªçn vai tr√≤">
              {roles.map((r) => (
                <Option key={r.vaiTroId} value={r.vaiTroId}>
                  {r.tenVaiTro}
                </Option>
              ))}
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal chi ti·∫øt */}
      <Modal
        open={detailModal}
        title="Chi ti·∫øt ng∆∞·ªùi d√πng"
        onCancel={() => setDetailModal(false)}
        footer={null}
        width={700}
      >
        {selectedUser && (
          <Tabs defaultActiveKey="1">
            <TabPane tab="Th√¥ng tin c√° nh√¢n" key="1">
              <p><b>H·ªç t√™n:</b> {selectedUser.hoTen}</p>
              <p><b>Email:</b> {selectedUser.email}</p>
              <p><b>S·ªë ƒëi·ªán tho·∫°i:</b> {selectedUser.soDienThoai}</p>
              <p><b>Vai tr√≤:</b> {selectedUser.vaiTro?.tenVaiTro}</p>
              <p><b>Tr·∫°ng th√°i:</b> {selectedUser.trangThai ? "Ho·∫°t ƒë·ªông" : "ƒê√£ kh√≥a"}</p>
            </TabPane>
            <TabPane tab="ƒê·ªãa ch·ªâ ng∆∞·ªùi d√πng" key="2">
              <Table
                dataSource={selectedUser.diaChiNguoiDung || []}
                columns={[
                  { title: "H·ªç t√™n nh·∫≠n", dataIndex: "hoTenNhan" },
                  { title: "SƒêT nh·∫≠n", dataIndex: "soDienThoaiNhan" },
                  { title: "ƒê·ªãa ch·ªâ chi ti·∫øt", dataIndex: "diaChiChiTiet" },
                  {
                    title: "M·∫∑c ƒë·ªãnh",
                    dataIndex: "macDinh",
                    render: (val) => (val ? "‚úÖ" : "‚Äî"),
                  },
                ]}
                pagination={false}
                rowKey="diaChiId"
              />
            </TabPane>
          </Tabs>
        )}
      </Modal>
    </div>
  );
}
