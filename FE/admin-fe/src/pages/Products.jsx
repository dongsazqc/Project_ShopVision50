// src/pages/admin/Products.jsx
import {
  Table,
  Button,
  Space,
  Modal,
  Form,
  Input,
  Select,
  message,
  Tabs,
  Upload,
  Popconfirm,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  EyeOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import { useState } from "react";

const { Option } = Select;
const { TabPane } = Tabs;

export default function Products() {
  const [products, setProducts] = useState([
    {
      SanPhamId: 1,
      TenSanPham: "√Åo thun nam StyleWear",
      MoTa: "√Åo thun cotton cao c·∫•p, tho√°ng m√°t, d·ªÖ ph·ªëi ƒë·ªì.",
      GiaGoc: 250000,
      ThuongHieu: "StyleWear",
      BaoHanh: "6 th√°ng",
      TrangThai: true,
      NgayTao: "2025-01-01",
      DanhMuc: { TenDanhMuc: "√Åo nam" },
      BienTheSanPham: [
        {
          BienTheId: 1,
          GiaBan: 200000,
          SoLuongTon: 50,
          KichCo: { TenKichCo: "M" },
          MauSac: { TenMau: "Tr·∫Øng" },
        },
        {
          BienTheId: 2,
          GiaBan: 200000,
          SoLuongTon: 30,
          KichCo: { TenKichCo: "L" },
          MauSac: { TenMau: "ƒêen" },
        },
      ],
      HinhAnhSanPham: [
        { HinhAnhId: 1, URL: "https://via.placeholder.com/120x120", AnhChinh: true },
        { HinhAnhId: 2, URL: "https://via.placeholder.com/120x120/cccccc", AnhChinh: false },
      ],
    },
  ]);

  //const [loading, setLoading] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [form] = Form.useForm();
  const [detailModal, setDetailModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);

  // =======================
  // üì¶ TODO: G·ªåI API DANH S√ÅCH S·∫¢N PH·∫®M ·ªû ƒê√ÇY SAU N√ÄY
  // =======================

  // üß© L∆∞u s·∫£n ph·∫©m (th√™m/s·ª≠a c·ª•c b·ªô)
  const handleSave = (values) => {
    if (editingProduct) {
      // C·∫≠p nh·∫≠t
      setProducts((prev) =>
        prev.map((p) =>
          p.SanPhamId === editingProduct.SanPhamId ? { ...p, ...values } : p
        )
      );
      message.success("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng (mock)");
    } else {
      // Th√™m m·ªõi
      const newProduct = {
        SanPhamId: Date.now(),
        NgayTao: new Date().toISOString(),
        ...values,
      };
      setProducts((prev) => [...prev, newProduct]);
      message.success("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng (mock)");
    }

    setOpenModal(false);
    form.resetFields();
  };

  // üóëÔ∏è X√≥a s·∫£n ph·∫©m
  const handleDelete = (id) => {
    setProducts((prev) => prev.filter((p) => p.SanPhamId !== id));
    message.success("ƒê√£ x√≥a s·∫£n ph·∫©m (mock)");
  };

  // üëÅÔ∏è Xem chi ti·∫øt
  const handleView = (record) => {
    setSelectedProduct(record);
    setDetailModal(true);
  };

  const columns = [
    {
      title: "T√™n s·∫£n ph·∫©m",
      dataIndex: "TenSanPham",
      key: "TenSanPham",
    },
    {
      title: "Danh m·ª•c",
      dataIndex: ["DanhMuc", "TenDanhMuc"],
      key: "DanhMuc",
      render: (_, record) => record.DanhMuc?.TenDanhMuc || "‚Äî",
    },
    {
      title: "Gi√° g·ªëc",
      dataIndex: "GiaGoc",
      key: "GiaGoc",
      render: (val) => `${Number(val).toLocaleString()} ‚Ç´`,
    },
    {
      title: "Th∆∞∆°ng hi·ªáu",
      dataIndex: "ThuongHieu",
      key: "ThuongHieu",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "TrangThai",
      key: "TrangThai",
      render: (val) => (val ? "ƒêang b√°n" : "Ng·ª´ng b√°n"),
    },
    {
      title: "Ng√†y t·∫°o",
      dataIndex: "NgayTao",
      key: "NgayTao",
      render: (val) => new Date(val).toLocaleDateString("vi-VN"),
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button icon={<EyeOutlined />} onClick={() => handleView(record)} />
          <Button
            icon={<EditOutlined />}
            type="primary"
            onClick={() => {
              setEditingProduct(record);
              form.setFieldsValue(record);
              setOpenModal(true);
            }}
          />
          <Popconfirm
            title="X√≥a s·∫£n ph·∫©m n√†y?"
            onConfirm={() => handleDelete(record.SanPhamId)}
          >
            <Button danger icon={<DeleteOutlined />} />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <Space
        style={{
          marginBottom: 16,
          display: "flex",
          justifyContent: "space-between",
        }}
      >
        <Input.Search
          placeholder="T√¨m s·∫£n ph·∫©m..."
          onSearch={(value) =>
            setProducts((prev) =>
              prev.filter((p) =>
                p.TenSanPham.toLowerCase().includes(value.toLowerCase())
              )
            )
          }
          style={{ width: 300 }}
        />
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => {
            setEditingProduct(null);
            setOpenModal(true);
          }}
        >
          Th√™m s·∫£n ph·∫©m
        </Button>
      </Space>

      <Table
        dataSource={products}
        columns={columns}
        //loading={loading}
        rowKey="SanPhamId"
        bordered
      />

      {/* MODAL TH√äM / S·ª¨A */}
      <Modal
        title={editingProduct ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}
        open={openModal}
        onCancel={() => setOpenModal(false)}
        onOk={() => form.submit()}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form} onFinish={handleSave}>
          <Form.Item
            label="T√™n s·∫£n ph·∫©m"
            name="TenSanPham"
            rules={[{ required: true, message: "Nh·∫≠p t√™n s·∫£n ph·∫©m" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item label="M√¥ t·∫£" name="MoTa">
            <Input.TextArea rows={3} />
          </Form.Item>
          <Form.Item label="Gi√° g·ªëc" name="GiaGoc">
            <Input type="number" min={0} />
          </Form.Item>
          <Form.Item label="Th∆∞∆°ng hi·ªáu" name="ThuongHieu">
            <Input />
          </Form.Item>
          <Form.Item label="B·∫£o h√†nh" name="BaoHanh">
            <Input />
          </Form.Item>
          <Form.Item label="Tr·∫°ng th√°i" name="TrangThai" initialValue={true}>
            <Select>
              <Option value={true}>ƒêang b√°n</Option>
              <Option value={false}>Ng·ª´ng b√°n</Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* MODAL CHI TI·∫æT */}
      <Modal
        open={detailModal}
        title="Chi ti·∫øt s·∫£n ph·∫©m"
        onCancel={() => setDetailModal(false)}
        footer={null}
        width={800}
      >
        {selectedProduct && (
          <Tabs defaultActiveKey="1">
            <TabPane tab="Th√¥ng tin chung" key="1">
              <p>
                <b>T√™n:</b> {selectedProduct.TenSanPham}
              </p>
              <p>
                <b>M√¥ t·∫£:</b> {selectedProduct.MoTa}
              </p>
              <p>
                <b>Th∆∞∆°ng hi·ªáu:</b> {selectedProduct.ThuongHieu}
              </p>
              <p>
                <b>Gi√° g·ªëc:</b>{" "}
                {selectedProduct.GiaGoc
                  ? Number(selectedProduct.GiaGoc).toLocaleString()
                  : "0"}{" "}
                ‚Ç´
              </p>
              <p>
                <b>Danh m·ª•c:</b>{" "}
                {selectedProduct.DanhMuc?.TenDanhMuc || "Ch∆∞a c√≥"}
              </p>
            </TabPane>
            <TabPane tab="Bi·∫øn th·ªÉ" key="2">
              <Table
                dataSource={selectedProduct?.BienTheSanPham || []}
                columns={[
                  { title: "K√≠ch c·ª°", dataIndex: ["KichCo", "TenKichCo"] },
                  { title: "M√†u s·∫Øc", dataIndex: ["MauSac", "TenMau"] },
                  { title: "Gi√° b√°n", dataIndex: "GiaBan" },
                  { title: "T·ªìn kho", dataIndex: "SoLuongTon" },
                ]}
                pagination={false}
                rowKey="BienTheId"
              />
            </TabPane>
            <TabPane tab="H√¨nh ·∫£nh" key="3">
              <Upload
                listType="picture-card"
                fileList={
                  selectedProduct?.HinhAnhSanPham?.map((img) => ({
                    uid: img.HinhAnhId,
                    url: img.URL,
                    name: `·∫¢nh ${img.HinhAnhId}`,
                    status: "done",
                  })) || []
                }
                showUploadList={{ showRemoveIcon: false }}
                itemRender={(originNode, file) => (
                  <img
                    src={file.url}
                    alt="·∫¢nh s·∫£n ph·∫©m"
                    style={{
                      width: 100,
                      height: 100,
                      objectFit: "cover",
                      borderRadius: 6,
                    }}
                  />
                )}
              >
                <Button icon={<UploadOutlined />}>Th√™m ·∫£nh</Button>
              </Upload>
            </TabPane>
          </Tabs>
        )}
      </Modal>
    </div>
  );
}
